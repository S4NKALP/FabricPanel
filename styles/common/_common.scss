@use "sass:color";

@use "functions";
@use "mixins";
@use "../theme.scss";
@use "../variable.scss";


%debug {
  border: 1px solid red;
}


.flat {
  border-radius: 4px;
}

.shadow {
  @extend .flat;
  box-shadow: color.mix(theme.$background-dark, black, 15%) 0 4px;
}

.bordered {
  border: 1.5px solid theme.$surface-disabled;
}

.wave1 {
  border-radius: 24px 10px;
}

.wave2 {
  border-radius: 10px 24px;
}

#panel {
  &-inner {
    $bar-opacity-ratio: variable.$bar-opacity * .01;
    $transparency-value: (
      1 - $bar-opacity-ratio) * 100%;
    background-color: color.mix(theme.$bar-background, transparent, $transparency-value
    );

  padding: variable.$bar-padding_y variable.$bar-padding_x;
  $shadow: 0 0 0 variable.$bar-border-width theme.$shadow-color,
    variable.$bar-shadow-offset variable.$bar-shadow-blur variable.$bar-shadow-spread color.adjust(theme.$shadow-color,
      $alpha: calc(variable.$bar-shadow-opacity - 1));

  box-shadow: if(variable.$bar-shadow-enabled, $shadow, none);


}
}

.floating {
  margin: 1rem 1.5rem 0rem 1.5rem;
  border-color: theme.$surface-disabled;
}

.panel-box,
.panel-button {
  background-color: theme.$background-dark;
}

.default {
  border-radius: variable.$radius-large;
}

.panel-box {
  border-radius: variable.$radius-large;
  padding: .1em .9em;
  color: theme.$text-main;
  font-weight: 700;
}


.panel-button {
  padding: variable.$bar-buttons-padding-x variable.$bar-buttons-padding-y;
  opacity: variable.$bar-buttons-opacity * .01;

  $shadow: 0 0 0 variable.$bar-border-width theme.$shadow-color,
    variable.$bar-buttons-shadow-offset variable.$bar-buttons-shadow-blur variable.$bar-buttons-shadow-spread color.adjust(theme.$shadow-color,
      $alpha: calc(variable.$bar-buttons-shadow-opacity - 1));

  box-shadow: if(variable.$bar-buttons-shadow-enabled, $shadow, none);

  @include mixins.widget_style(variable.$bar-widget_style);

  label {
    color: theme.$text-main;
    font-weight: variable.$font-weight;
  }

  &:hover {
    @extend %widget_hover;
    opacity: variable.$bar-buttons-hover-opacity * .01;
  }
}



.panel-icon {
  margin-left: 2px;
  margin-right: 2px;
  color: theme.$text-main;
}

.panel-text {
  font-weight: 700;
  margin-left: 10px;
}

.overlay-progress-bar {
  color: transparent;
  background-color: transparent;
  border-color: theme.$surface-disabled;
}

.overlay-icon {
  margin: 0 functions.toEm(6) 0 0;
}


tooltip {
  @extend %unset;
  opacity: variable.$bar-menus-tooltip-opacity * .01;
  background-color: theme.$background-dark;
  border-radius: variable.$bar-menus-tooltip-border-radius;

  animation: tooltipShow .25s cubic-bezier(.5, .25, 0, 1);
  border: if(variable.$bar-menus-tooltip-border-enabled, variable.$border, none);


  $shadow: 0 0 0 variable.$bar-border-width theme.$shadow-color,
    variable.$bar-menus-tooltip-shadow-offset variable.$bar-menus-tooltip-shadow-blur variable.$bar-menus-tooltip-shadow-spread color.adjust(theme.$shadow-color,
      $alpha: calc(variable.$bar-menus-tooltip-shadow-opacity - 1));

  box-shadow: if(variable.$bar-menus-tooltip-shadow-enabled, $shadow, none);

  label {
    @extend %unset;
    color: theme.$text-main;
    font-weight: variable.$bar-menus-tooltip-font-weight;
  }
}

tooltip>* {
  padding: variable.$bar-menus-tooltip-padding-y variable.$bar-menus-tooltip-padding-x;
}

menu {
  margin: functions.toEm(6);
  padding: functions.toEm(6);
  background-color: theme.$background-alt;
  background-clip: border-box;
  border-radius: 12px;
  border: variable.$border;
}

menuitem {
  transition: background-color 75ms cubic-bezier(0, 0, .2, 1);
  min-height: 30px;
  min-width: 40px;
  background-clip: border-box;
  border-radius: variable.$radius;


  arrow {
    min-height: 16px;
    min-width: 16px;
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
    margin-left: 8px;
  }

  separator {
    min-height: 1px;
    margin: functions.toEm(4) 0;
    background-color: theme.$background;
  }
}

menu>menuitem:hover {
  background-color: theme.$surface-highlight;
}

menu>arrow {
  min-height: 16px;
  min-width: 16px;
  padding: functions.toEm(4);
  color: theme.$background-alt;
}

menu>arrow.top {
  margin-top: 0;
  border-radius: 6px;
  -gtk-icon-source: -gtk-icontheme("pan-up-symbolic");
}

menu>arrow.bottom {
  margin-top: 8px;
  margin-bottom: -12px;
  border-radius: 6px;
  -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
}

check,
radio {
  min-height: 15px;
  min-width: 15px;
  margin: functions.toEm(4);
  padding: 0;
  background-color: theme.$text-main;
  border-radius: variable.$radius-large;
  transition:
    all 75ms cubic-bezier(0, 0, .2, 1),
    box-shadow 150ms cubic-bezier(0, 0, .2, 1);
}

check {
  border-radius: 4px;
}

check:hover,
radio:hover {
  box-shadow: 0 0 0 4px color.mix(theme.$background-dark, transparent, 10%);
  background-color: theme.$text-muted;
}

check:active,
radio:active {
  box-shadow: 0 0 0 4px color.mix(theme.$background-dark, transparent, 10%);
  background-color: theme.$background-dark;
}

check:checked,
check:indeterminate,
radio:checked,
radio:indeterminate {
  color: theme.$background-dark;
  background-color: theme.$text-main;
}

check:checked {
  -gtk-icon-source: -gtk-icontheme("checkbox");
}

check:checked:hover,
check:indeterminate:hover,
radio:checked:hover,
radio:indeterminate:hover {
  box-shadow: 0 0 0 4px color.mix(theme.$text-main, transparent, 10%);
  background-color: theme.$text-main;
}

check:checked:active,
check:indeterminate:active,
radio:checked:active,
radio:indeterminate:active {
  box-shadow: 0 0 0 4px color.mix(theme.$text-main, transparent, 10%);
  background-color: theme.$text-main;
}

switch {
  transition: all 75ms cubic-bezier(0, 0, .2, 1);
  margin: functions.toEm(4) 0;
  border-radius: variable.$radius-large;
  background-color: color.mix(theme.$background, white, 90%);
  background-clip: padding-box;
  font-size: 0;
  color: transparent;

  slider {
    transition: all 75ms cubic-bezier(0, 0, .2, 1);
    min-width: 12px;
    min-height: 12px;
    margin: functions.toEm(4);
    border-radius: variable.$radius-large;
    outline: none;
    background-color: theme.$text-main;
    border: 0;
    color: transparent;
  }

  &:checked {
    background-color: #06aa58;
  }

  &:disabled {
    opacity: .5;
  }
}

@keyframes tooltipShow {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes spin {
  to {
    -gtk-icon-transform: rotate(1turn);
  }
}

expander {
  arrow {
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
    color: color.mix(variable.$border-color, transparent, 30%);

    &:dir(rtl) {
      -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
    }

    &:hover {
      color: color.mix(variable.$border-color, transparent, 60%);
    }

    &:checked {
      -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }
  }
}

spinner {
  background: none;
  opacity: 0;
  -gtk-icon-source: -gtk-icontheme("process-working-symbolic");
}

spinner:checked {
  opacity: 1;
  animation: spin 1s linear infinite;
}

separator {
  min-width: 1px;
  min-height: 1px;
  background-color: theme.$surface-disabled;
}

scrollbar {
  background-color: theme.$text-main;
  border-radius: variable.$radius;
  margin-left: 8px;
  min-width: .3em;
}

#corner {
  background-color: theme.$bar-background;
  border-radius: 0;
}

#corner-container {
  min-width: 20px;
  min-height: 20px;
}



#cava {
  color: theme.$text-main;
}

#volumemenu {
  min-width: 5rem;
}

.cover {
  min-height: .8em;
  min-width: 3em;
  border-radius: variable.$radius;
  background-position: center;
  background-size: contain;
  margin: functions.toEm(3) functions.toEm(10) functions.toEm(3) 0;
}

// Menu styling
menu#ocr-menu {
  padding: .45em;

  menuitem {
    padding: .25em 1em;
    border-radius: variable.$radius;

    &:hover {
      background-color: theme.$surface-neutral;

      label#ocr-menu-item {
        color: theme.$background-dark;
      }
    }

    label#ocr-menu-item {
      color: theme.$surface-highlight;

      &.selected {
        font-weight: bold;
        color: theme.$accent-light;
      }
    }
  }
}

.desktop-clock-box {
  margin: 0 15rem 15rem 15rem;
}

#clock>label {
  font-size: 9rem;
  font-weight: 600;
  @extend %desktop-widget;
}

#date>label {
  @extend %title_1;
  @extend %desktop-widget;
}


#cpu {
  border-radius: variable.$bar-widgets-cpu-border-radius;
  border: if(variable.$bar-widgets-cpu-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-cpu-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-cpu-icon_size;
    margin-right: variable.$bar-widgets-cpu-spacing;
  }
}

#memory {
  border-radius: variable.$bar-widgets-memory-border-radius;
  border: if(variable.$bar-widgets-memory-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-memory-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-memory-icon_size;
    margin-right: variable.$bar-widgets-memory-spacing;
  }
}

#network_usage {
  border-radius: variable.$bar-widgets-network_usage-border-radius;
  border: if(variable.$bar-widgets-network_usage-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-network_usage-border-width;


  #upload_label{
    margin-right: variable.$bar-widgets-network_usage-spacing;
  }

  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-network_usage-icon_size;
    margin-right: variable.$bar-widgets-network_usage-spacing;
  }
}

#storage {
  border-radius: variable.$bar-widgets-storage-border-radius;
  border: if(variable.$bar-widgets-storage-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-storage-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-storage-icon_size;
    margin-right: variable.$bar-widgets-storage-spacing;
  }
}

#battery {
  border-radius: variable.$bar-widgets-battery-border-radius;
  border: if(variable.$bar-widgets-battery-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-battery-border-width;


}

#bluetooth {
  border-radius: variable.$bar-widgets-bluetooth-border-radius;
  border: if(variable.$bar-widgets-bluetooth-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-bluetooth-border-width;


}

#brightness {
  border-radius: variable.$bar-widgets-brightness-border-radius;
  border: if(variable.$bar-widgets-brightness-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-brightness-border-width;


  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-brightness-icon_size;
    margin-right: variable.$bar-widgets-brightness-spacing;
  }
}

#cava {
  border-radius: variable.$bar-widgets-cava-border-radius;
  border: if(variable.$bar-widgets-cava-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-cava-border-width;

}

#click_counter {
  border-radius: variable.$bar-widgets-click_counter-border-radius;
  border: if(variable.$bar-widgets-click_counter-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-click_counter-border-width;


  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-click_counter-icon_size;
    margin-right: variable.$bar-widgets-click_counter-spacing;
  }
}

#datetime_menu {
  border-radius: variable.$bar-widgets-datetime_menu-border-radius;
  border: if(variable.$bar-widgets-datetime_menu-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-datetime_menu-border-width;


}

#desktop_clock {
  border-radius: variable.$bar-widgets-desktop_clock-border-radius;
  border: if(variable.$bar-widgets-desktop_clock-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-desktop_clock-border-width;

}

#hypr_idle {
  border-radius: variable.$bar-widgets-hypr_idle-border-radius;
  border: if(variable.$bar-widgets-hypr_idle-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-hypr_idle-border-width;


  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-hypr_idle-icon_size;
    margin-right: variable.$bar-widgets-hypr_idle-spacing;
  }
}

#hypr_picker {
  border-radius: variable.$bar-widgets-hypr_picker-border-radius;
  border: if(variable.$bar-widgets-hypr_picker-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-hypr_picker-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-hypr_picker-icon_size;
    margin-right: variable.$bar-widgets-hypr_picker-spacing;
  }
}

#hypr_sunset {
  border-radius: variable.$bar-widgets-hypr_sunset-border-radius;
  border: if(variable.$bar-widgets-hypr_sunset-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-hypr_sunset-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-hypr_sunset-icon_size;
    margin-right: variable.$bar-widgets-hypr_sunset-spacing;
  }
}

#keyboard {
  border-radius: variable.$bar-widgets-keyboard-border-radius;
  border: if(variable.$bar-widgets-keyboard-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-keyboard-border-width;


  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-keyboard-icon_size;
    margin-right: variable.$bar-widgets-keyboard-spacing;
  }


}

#language {
  border-radius: variable.$bar-widgets-language-border-radius;
  border: if(variable.$bar-widgets-language-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-language-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-language-icon_size;
    margin-right: variable.$bar-widgets-language-spacing;
  }
}

#microphone {
  border-radius: variable.$bar-widgets-microphone-border-radius;
  border: if(variable.$bar-widgets-microphone-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-microphone-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-microphone-icon_size;
    margin-right: variable.$bar-widgets-microphone-spacing;
  }
}

#mpris {
  border-radius: variable.$bar-widgets-mpris-border-radius;
  border: if(variable.$bar-widgets-mpris-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-mpris-border-width;

}

#ocr {
  border-radius: variable.$bar-widgets-ocr-border-radius;
  border: if(variable.$bar-widgets-ocr-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-ocr-border-width;



  label {
    font-size: variable.$bar-widgets-ocr-icon_size;
    margin-right: variable.$bar-widgets-ocr-spacing;
  }

}

#overview {
  border-radius: variable.$bar-widgets-overview-border-radius;
  border: if(variable.$bar-widgets-overview-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-overview-border-width;


}

#power {
  border-radius: variable.$bar-widgets-power-border-radius;
  border: if(variable.$bar-widgets-power-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-power-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-power-icon_size;
    margin-right: variable.$bar-widgets-power-spacing;
  }
}



#recorder {
  border-radius: variable.$bar-widgets-recorder-border-radius;
  border: if(variable.$bar-widgets-recorder-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-recorder-border-width;



}


#stop_watch {
  border-radius: variable.$bar-widgets-stop_watch-border-radius;
  border: if(variable.$bar-widgets-stop_watch-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-stop_watch-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-stop_watch-icon_size;
    margin-right: variable.$bar-widgets-stop_watch-spacing;
  }
}

#submap {
  border-radius: variable.$bar-widgets-submap-border-radius;
  border: if(variable.$bar-widgets-submap-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-submap-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-submap-icon_size;
    margin-right: variable.$bar-widgets-submap-spacing;
  }
}

#systray {
  border-radius: variable.$bar-widgets-systray-border-radius;
  border: if(variable.$bar-widgets-systray-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-systray-border-width;


}


#quick_settings {
  border-radius: variable.$bar-widgets-quick_settings-border-radius;
  border: if(variable.$bar-widgets-quick_settings-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-quick_settings-border-width;


}

#taskbar {
  border-radius: variable.$bar-widgets-taskbar-border-radius;
  border: if(variable.$bar-widgets-taskbar-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-taskbar-border-width;

}

#theme_switcher {
  border-radius: variable.$bar-widgets-theme-border-radius;
  border: if(variable.$bar-widgets-theme-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-theme-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-theme-icon_size;
    margin-right: variable.$bar-widgets-theme-spacing;
  }
}

#updates {
  border-radius: variable.$bar-widgets-updates-border-radius;
  border: if(variable.$bar-widgets-updates-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-updates-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-updates-icon_size;
    margin-right: variable.$bar-widgets-updates-spacing;
  }
}

#volume {
  border-radius: variable.$bar-widgets-volume-border-radius;
  border: if(variable.$bar-widgets-volume-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-volume-border-width;




  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-volume-icon_size;
    margin-right: variable.$bar-widgets-volume-spacing;
  }
}

#weather {
  border-radius: variable.$bar-widgets-weather-border-radius;
  border: if(variable.$bar-widgets-weather-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-weather-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-weather-icon_size;
    margin-right: variable.$bar-widgets-weather-spacing;
  }
}

#window_title {
  border-radius: variable.$bar-widgets-window_title-border-radius;
  border: if(variable.$bar-widgets-window_title-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-window_title-border-width;



  #nerd-icon.panel-icon {
    font-size: variable.$bar-widgets-window_title-icon_size; // TODO: fix this
    margin-right: variable.$bar-widgets-window_title-spacing;
  }
}

#workspaces {
  border-radius: variable.$bar-widgets-workspaces-border-radius;
  border: if(variable.$bar-widgets-workspaces-border-enabled, variable.$border, none);
  border-width: variable.$bar-widgets-workspaces-border-width;
}
